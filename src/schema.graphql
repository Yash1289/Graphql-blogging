 # import UserOrderByInput , PostOrderByInput , CommentOrderByInput from "./generated/schema.graphql" 
    type Query {
        me : User!
        post(id : ID!) : Post!
        myposts(query : String , first : Int , skip : Int , after : String , orderBy : PostOrderByInput ) : [Post!]!
        users(query : String, first : Int , skip : Int , after : String, orderBy : UserOrderByInput) : [User!]!
        posts(query : String , first : Int , skip : Int , after : String , orderBy : PostOrderByInput) : [Post!]!
        comments( first : Int , skip : Int , after : String, orderBy : CommentOrderByInput) : [Comment!]!
    }

    type Mutation {
        createUser(data : CreateUserInput) : AuthPayload!
        login(data : LoginUserInput ) : AuthPayload!
        createPost(post : CreatePost) : Post!
        createComment(comment : CreateComment) : Comment!
        updateUser( data : UpdateUserInput!) : User!
        updatePost(id : ID! , data : UpdatePostInput!) : Post!
        updateComment(id : ID! , data : UpdateCommentInput!) : Comment!
        deleteUser: User!
        deletePost(id : ID!) : Post!
        deleteComment(id : ID!) : Comment! 
    }

    type Subscription {
        comment(postId : ID!) : commentSubscriptionPayload,
        post : postSubscriptionPayload! ,
        myPost : postSubscriptionPayload!
    }

    type AuthPayload {
        token : String! ,
        user : User!
    }

    input CreateUserInput {
        name : String!
        email: String!  
        password : String!             
    }

    input LoginUserInput {
        email : String!
        password : String!
    }

    input UpdateUserInput{
        name : String
        email : String
        password : String
    }

    input CreatePost{
        title : String! 
        body : String! 
        ispublished: Boolean! 
    }   

     input UpdatePostInput {
        title : String
        body : String
        ispublished : Boolean
    }

    input CreateComment {
        text : String!
        post : ID!
    }

    input UpdateCommentInput {
        text : String
    }

    type Post {
        id : ID!  
        title : String! 
        body : String!
        ispublished : Boolean!
        author : User!
        comments : [Comment!]!,
         updatedAt : String!
        createdAt : String!
    }

    type User {
        name : String!
        email: String
        id : ID!
        password : String!
        posts : [Post!]!
        comments : [Comment!]!
        updatedAt : String!
        createdAt : String!
    }

    type Comment {
        id : ID!
        text : String!
        author : User!
        post : Post!,
         updatedAt : String!
        createdAt : String!
    }

    enum MutationType{
        CREATED
        DELETED
        UPDATED
    }

    type postSubscriptionPayload {
        mutation : MutationType! ,
        node : Post!
    }

    type commentSubscriptionPayload {
        mutation : MutationType! ,
        node : Comment
    }